			    TRIGGERS (TETIKLEYICILER)


1- fONKSIYONLAR GIBI VERI TABANINA KAYDEDILIRLER 
2- vtys TARAFINDA TRIGGERIN SARTLARI OLUSTUGUNDA OTOMATIK OLARAK CAGRILIRLAR 
3- tABLOLAR UZERINDE DEGISIKJLIK YAPILMAK ISTENDIGINDE CALISIRLAR 
INSERT, UPDATE, DELETE 


CREATE TRIGGER trigger_ismi 
{BEFORE|AFTER} {events}
ON tablo_adi
FOR EACH ROW EXECUTE PROCEDURE trigger_fonk_adi()


CREATE OR REPLACE FUNCTION trigger_fonk()
RETURNS TRIGGER AS$$
BEGIN 
	STATEMENTS;
	[ RETURN [NULL | OLD | NEW]; ]

END

$$ LANGUAGE 'plpgsql'

=> Trigger fonksiyonlari parametre almazlar Trigger dondururler 



1- Trigger Fonksiyonu Yazilir 
	CREATE OR REPLACE FUNCTION trig_fonk_ismi()

2- Tablo ile trigger fonksiyonu baglanir 
	CREATE TRIGGER trig_ismi 

INSERT = Sadece NEW kullanilir 
UPDATE = OLD ve NEW kullanilir 
DELETE = Sadece OLD kullanilir 




ornek 
Sadece tatil gunleri disinda ve mesai saatleri icinde employee tablosuna calisan eklenmesine izin veren triggeri yaziniz 


CREATE TRIGGER t_ornek6
BEFORE INSERT 
on employee
FOR EACH ROW EXECUTE PROCEDURE trig_fonk_ornek6()


CREATE FUNCTION trig_fonk_ornek6()
RETURNS TRIGGER AS $$

BEGIN 
	IF (to_char(now(),'DY') in ('SAT','SUN') OR to_char(now(),'HH24') not 
		between '08' and '18') THEN 
	
		RAISE EXCEPTION 'Sadece mesai gunlerinde ve mesai saatlerinde 			insert yapabilirsiniz';
		RETURN NULL;
	else 
		RETURN NEW;
	END IF;


END 
$$ LANGUAGE 'plpgsql'


TETIKLENMESI 
INSERT INTO employee VALUES('Vlademir', 'S', 'Putin', '666666666', '1952-10-07', '8975 Rusya', 'M', '125000', '333445555', '5');


Düşürülmesi:
Önce:
 DROP TRIGGER t_ornek6 on employee; 

Sonra:
DROP FUNCTION trig_fonk_ornek6();


ORNEK 
=> Departman tablosunda dnumber kolonu degisince employee tablosunda da dno'nun ayni sekilde degismesini saglayan triggeri yaziniz. (Oncelikle departman tablosundaki yabanci anahtar olma kisitlarini kaldiriniz) 

=> ALTER TABLE project DROP CONSTRAINT project_dnum_fkey
=> ALTER TABLE dept_locations DROP CONSTRAINT dept_locations_dnumber_fkey;
=> ALTER TABLE employee DROP CONSTRAINT foreign_key_const; 

CREATE TRIGGER t_ornek7
AFTER UPDATE 
ON department 
FOR EACH ROW EXECUTE PROCEURE trig_fonk_ornek7();



CREATE FUNCTION trig_fonk_ornek7()
RETURNS TRIGGER AS $$

BEGIN 
	UPDATE employee
	SET dno = new.dnumber
	WHERE dno = old.dnumber
	
	RETURN NEW;

END 


$$ LANGUAGE 'plpgsql';




ORNEK 
=> Maas inisine ve %10 dan fazla maas artisina izin vermeyen triggeri yaziniz 

CREATE TRIGGER t_ornek8
BEFORE UPDATE 
ON employee 
FOR EACH ROW EXECUTE PROCEDURE trig_fonk_ornek8();



CREATE FUNCTION trig_fonk_ornek8()
RETURNS TRIGGER AS $$ 
BEGIN 
	IF(old.salary > new.salary OR new.salary>1.1*old.salary) THEN 
		RAISE EXCEPTION 'MAAS DUSUREMEZSINIZ VE %10 DAN FAZLA ZAM 				YAPAMAZSINIZ';
		RETURN old;
	ELSE 
		RETURN new;
	
	END IF; 

END;
$$ LANGUAGE 'plpgsql';




Departman tablonuzda salary ile ayni tipte total_salary kolonu ekleyin. Employee tablosunda maas deegisikligi oldugunda departman tablonuzdaki total_salary kolonunda da gerekli guncellemeyi yapacak triggeri yaziniz. 

ALTER TABLE department 
ADD COLUMN total_salary INTEGER default 0; 

UPDATE department 
SET total_salary = (SELECT SUM(salary) FROM EMPLOYEE WHERE dno=dnum); 


CREATE TRIGGER maas_update_trigger 
BEFORE UPDATE 
ON DEPARTMENT
FOR EACH ROW EXECUTE PROCEDURE trig_fonk_maas_update()


CREATE OR REPLACE FUNCTION trig_fonk_maas_update()
RETURNS TRIGGER AS $$
BEGIN 
	UPDATE DEPARTMENT total_salary=total_salary+(new.salary-old_salary) where 
	dno =dnum;
	
	RETURN NEW;	

END 
$$ LANGUAGE 'plpgsql';


==========================> 

CREATE TRIGGER maas_update_trigger 
AFTER UPDATE OR DELETE OR INSERT 
ON DEPARTMENT
FOR EACH ROW EXECUTE PROCEDURE trig_fonk_maas_update()


CREATE OR REPLACE FUNCTION trig_fonk_maas_update()
RETURNS TRIGGER AS $$
BEGIN 
	IF(TG_OP = 'DELETE') THEN 
		update department 
		set total_salary = total_salary-old.salary
		where dnumber = old.dno 

	elseif (TH_OP = 'UPDATE') THEN 
		update department 
		set total_salary = total_salary-old.salary+new.salary
		where dnumber=old.dno
	else
		update department 
		set total_salary = total_salary+new.salary
		where dnumber = new.dnumber 
	endIF;
	return new;	

END 
$$ LANGUAGE 'plpgsql';






































