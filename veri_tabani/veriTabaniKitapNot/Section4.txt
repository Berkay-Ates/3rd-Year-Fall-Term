INTERMEDIATE SQL 

JOIN EXPRESSION
The on condition allows a general predicate over the relations 
being joined. 
	=> select *
	   from student join takes on student.id=takes.id 
	
	=> select * 
	   from student,takes 
	   where student,id = takes.id

The join expression in this case is almsot the same as the 
join expression student NATURAL JOIN takes, since the natural 
join operation also requires that for a student tuple and a 
takes tuple to match.  

OUTER JOINS 
The OUTER JOIN operation works in a manner similar to the join
 operations we have already studied, but preserve those tuples 
 that would be lost in a join by creating tuples in the result
  containing null values. 

There are in fact three forms of outer join 
=> The LEFT OUTER JOIN preserves tuples only in the relation 
named before.
=> The RIGHT OUTER JOIN preserves tuples onlu in the relation 
named after. 
=> The FULL OUTER JOIN preserves tuples in both relations. 

In contrast the join operations we studied eartlier that do 
not preserve nonmatched tuples are called INNER JOIN operations,
 to distinguish them from the outer-join operatins. 

For every tuple in t in the left-hand-side relation that does
not match any tuple in the right-hand-side relation in the 
inner join add a tuple r to the result of the join constructed 
as follows: 

=> The attributes of tuple r that are derived from the left-hand-side 
relation are filled in with the values from tuple t. 

=> The remaining attributes of r are filled with null values. 

As another example of the use of the outer-join operating we can 
write the query find all students who have not taken a course as: 


	select ID 
	from student natural left outer join takes 
	where course_id is null; 


=> The RIGHT OUTER JOIN is symmetric to the LEFT OUTER JOIN.
 Tuples from th right-hand-side relation that do not match any 
 tuple in the LEFT-HAND-SIDE relation are padded with nulls and
 are added to the result of the right outer join. 

	select *
	from takes natural right outer join student: 
the query is same with the above query.



=> The Full Outer Join is a combination of th left and right 
outer-join types. After the operation computes the result of
 the inner join, it extends with nulls those tuples from the 
 left-hand-side relation and that did not match with any from
  the right-hand side relation and then adds them to the result. 


Display a list of all students in the Comp. Sci. department,
 along with the course sections, if any, that they have taken 
 in Spring 2009; all course sections from Spring 2009 must be 
 displayed, even if no student from the Comp. Sci. department 
 has taken the course section


		select *
		from (select *
			from student
			where dept name= ’Comp. Sci’)
			natural full outer join
			(select *
			from takes
			where semester = ’Spring’ and year = 2009);



=>On and where befave differently for outer join. The reason 
for this si that outer join adds null-padded tuples only for 
those tuples that do not contribute to the result of the correspoiding 
inner join. The on condition is part of the outer join specification 
but a where clause is not. 





JOIN TYPES AND CONDITIONS 
To distinguish normal joins from outer joins normal joins are 
called INNER JOINS in SQL. The keyword INNER is however optional. 
The default join type when the join clause us used without the 
outer prfix is the inner join .

	=> select * from student join takes using(id)
	=> select * from student inner join takes using(id)

=> similarly NATURAL JOIN is equivalent to NATURAL INNER JOIN. 

VIEWS
We use views because of SECURITY CONCERNS, PERSONALIZED COLLECTION.
 We can create another relation that we want to accessible for other users. However this approach is not such a brillant idea because whenever the actual data is updated the extra relation should be also updated. 

Instead sql allows a VIRTUAL RELATION  to be defined by a query and the relation conceptually contains the result of the query. The virtual relations is not precomputed ans stored but instead is computed by executing the query whenever the virtual relation is used. 

Any such relation taht is not part of the logical model but is made visible to a user as a virtual relation is callled a VIEW. It is possible to support a large number of views on top of any given set of actual relations. 



VIEW DEFINITION 
To define a view, we must give the view a name and must state the query that comdputes the vies. The form of the CREATE VIEW command is 

	create view VIEW_NAME as <query expression>;

=> Whenever the view relation is accessed its tuples are created by computing the query result. Thus the view relation is created whenever needed on demand. 


The attribute names of a view can be specified explicitly as follows 

	create view departments_total_salary(dept name, total salary) as
		select dept name, sum (salary)
		from instructor
		group by dept name;



=> Intuitively at any given time the set of tuples in the view relation is the result of evaluation of the query expression that defines the view. 


When we define a view, the database system stores the definition of the view itself, rather than the result of evaluation of the query expression that defines the view. Wherever a view relation appears in a query, it is replaced by the stored query expression.


One view may be used in the wxpression defining another veiw. 

MATERIALIZED VIEWS 
Certain database systems allow view relations to be stored but they make sure that if the  actual relations used in the view definition change the view is kept up-to-date. Such views are called MATERIALIZED VIEWS. 

The proces of keeping the materialized view up-to-date is called MATERIALIZED VIEW MAINENANCE. View maintenance can be done immediately when any of the relations on which the view is defined is updated. However some db systems updates the materialized views periodically which is a lazy approach. 

=> Applications that demand fast response to certain queries that compute aggregates over large relations can also benefit greatly by creating materialized views corresponding to the queries. As a result the materiaized view can be used to answer the query very qucikly avoiding reading the large underlying relatins. 

UPDATE OF A VIEW 
The difficulty is that a modification to the db expressed in terms of a aview must be translated to a modification to the actual relations in the logical model of the db. 

=>Since we allow a view name to appear whereever a relation name is allowed the following update query is possible 

	insert into faculty values(30765,green,music); 

 
Because of thoughtness of view related relations updation by view updation different database systems specify different conditions under which they permit updates on view relations. 

In general an sql view is said to be UPDATABLE if teh following conditions are all satisfied by the query defining the view 

=> The FROM clause has onlu one database relation 

=> The SELECT clause contains only attribute names of the relation and does not have any expressions aggregates or DISTINCT specification
 
=> Any attribute not listed in the SELECT clause can be set to null that is it does not have a NOT NULL constraint and is not part of a primary key. 

=> the query does not have GROUP BY or HAVING clause. 



TRANSACTIONS 
A transaction consists of a sequence of query and/or update staements. The SQL standard specifies that transaction begins implicitly when an SQL statement is executed. One of the following SQL statements must end teh transaction 

COMMIT WORK commits the current transactions that is it makes the updates performed by the transaction become permanent in the database. 

ROLLBACK WORK causes the current transaction to be rolled back that is it undoes all the updates performed by the SQL statements in the transaction. Thus the db state is restored to what it was before the first statement of the transaction was executed. 

=> Once a transaction has executed COMMIT WORK its effects can no longer be undeone by ROLLBACK WORK. 

=> Transasaction or Rollback operations is atomic, that is indivisible. Either all the effect of the thransaction are reflected in the database or none are. 


Applyung the notion of transactions to the above applications the update statements should be executed as a single transaction. An error while a transaction executes one of its statements would result in undoing of the effects of the earlier statements of the transaction so that the database is not left in partially updated state. 


In many SQL  implementation by default each SQL statements is taken to be a transaction on its own and gets committed as soon as it is executed. This approach could be changed depends on implementations


INTEGRITY CONSTRAINTS 
Integrity constraints ensure that changes made to the db by authorized users do not result in a loss of data consistency. Thus integrity constraints gurad against accidental damage to the databsase. 

=> Integrity constraints are usually identified as part of the db schema design proces and declared as part of the CREATE TABLE command used to create relations. However integrity constraints can also be added to an existing relation by using the command 
ALTER TABLE table-name ADD constrains, 
where constraints can be any constraint on the relation. 


CONSTRAINTS ON A SINGLE RELATINS

=>NOT NULL CONSTRAINTS 
We wish to forbid null values and we can do so by restricting the domain of the attributes. 
	name varchar(20) not null 
	budget numeric(12,2) not null 

The NOT NULL specification prohibits the insertion of a null value for the attribute. 


=> UNIQUE CONSTRAINTS 
The unique specifications says that attributes a1,a2,.. form a candidate key that is no two tuples in the relation can be equal on all the listed attributes. However candidate key attribute are permitted to be null unless they have explicitly been declared to be NOT NULL.


=> THE CHECH CLAUSE 
When applied to a relation declaration the clause CHECK(P) specifies a predicate P that must be satisfied by every tuple in a relatin. A common use of the chaec clause is to ensure that attribute values satisfy specified conditions in effect createing a powerfull type system. 

	check budget > 0



REFERENTIAL INTEGRITY 
Often we wish to ensure that a value that appears in one relation for a given set of attributes also appears for a certain set of attributes in another relation. This condition is called REFERENTIAL INTEGRITY. 
Foreign keys can be specified as part of the SQL create table statement by using the foreign key clasues. Foreign key dept_name references department. 

r1>relations R2>attributes K1>primary keys
r2 R2 K2 
We say that a subset C of R2 is a
foreign key referencing K1 in relation r1 if it is required that, for every tuple t2 in
r2, there must be a tuple t1 in r1 such that t1.K1 = t2.C


Requirements of this form are acalled REFERENTIAL-INTEGRITY CONSTRAINTS or  SUBSET DEPENDENCIES. 

REferans veren bir deger referans verdigi elmanlarin tablosunda primary key olmak zorunda degildir. Yani diger tabloda tekrar edebilir. 



When a referential-integrity constraint is violated the normal procedure is to reject the action that caused the violation. However a freigh key clause can specify that if a delete or update action on the referenced relation violatees the constraint then instead of rejection the action the sytems must take steps to change the tuple in the referencing relation to restore the constraint.


		create table course
			( ...
			foreign key (dept name) references department
			on delete cascade
			on update cascade,
			... );

Bir baska degisle refereans veren eleman silindiginde referans verdigi yerin de silinmesi veya referans veren eleman guncellendiginde refereans verdigi yerde de guncellenmesi olayini ONDELETECASCADE ve ONUPDATECASCADE operasyonlari ile saglariz. 

=> IF a cascading update or delete causes a constraint violations that cannot be handled by a further cascading operation the system aborts the transaction. As a result all the changes caused by the ransaction and its cascading actions are undone. 


INTEGRITY CONSTRAINT VIOLATION DURING A TRANSACTION 
Transactions may consist of several steps, and integrity constraints may be violated temporarily after one step but a later step may remove the viloation. 

=> To handle such situations the SQL standard allows a clause INITIALLY DEFERRED to be added to a constraint specification the constraint would then be checked at the end of a transactions and not at intermediate steeps. 


=> A constraint can alter natively be specified as DEGERRABLE  which means it is checked immediately by default but can be defferred when desired. 


COMPLEX CHECK CONDITIONS AND ASSERTIONS 

=>If a database implementation supports subqueries in teh CHECH clause we could specify the following referential-integrity xonstraint on the relation section 

	
	check (time slot id in (select time slot id from time slot))


=> Complex CHECH conditions can be useful when we want to ensure integrity of data, but may be costly to test. 

=> Check conditions is controlled when not only the date interted into db but also data updated in the db. 

ASSERTION 
An assertion is a predicate expressing a condition that we wish the database always to satisfy. Domain constraints and referential-integrity constraints are special forms of assertions. 

an assertion in SQL takes the form 
	
	=> create assertion <assertion name> check <predicate>;


=> When an assertion is created, the system tests it for validity. If the assertion is valid, then any future modification to the database is allowed only if it does not cause that assertion to be violated.


=> Currently none of the widely used dtabase systems supports either suqueries in the check clause predicate or the create assertion construct. However equivalent functionality can be implemented using trigers. 


			SQL DATA TYPES AND SCHEMAS 

Date and Time Type in SQL 
date => 4 digit year, month and day of the month , the order is matter
time => the time of day in hours minutes and seconds. 
timestamp = date + time 

We can use an expression of theform CAST e AS t to convert a character string e to the type t. 

=> To extract individual fields of a data or time value d we can use EXTRACT(field from d) where field can be one of year,month,day,hour,minute or second. 

SQL also provides a data type called INTERVAL and it allows computations based on dataes and times and on intervals. for example if x and y are of type date, then x-y is an interval whose value is the number of days fro date x to date y. 


INDEX CREATION 
An index on an attribute of a relation is a data structure that allows the database system to find those tuples in the relation that have a specified value for that attribute efficiently without scanning throught all the tuples of relation. 

	create idex studentID_index on student(ID);



LARGE OBJECT TYPES 
SQL provides large-object data types for character data (clob) and binary data (blob).

		book review clob(10KB)
		image blob(10MB)
		movie blob(2GB)

=> For result tuples containing large ovjects it is inefficient or impractical to retrieve on entire large object into memeory. Instead an application would usually use an SQL query to retrieve a locator for a large object and then use the locator to manipulate the object from the hos language which teh application itself is written. 



				USER DEFINED TYPES 
SQL supports two forms of user defined data types. The first form which we cover here is called DISTINCT TYPES. The other form called STRUCTURED DATA TYPES. 

The CREATE TYPE clause can be used to define new types. For example

		create type Dollars as numeric(12,2) final;
		create type Pounds as numeric(12,2) final;

define the user-defined types DOLLARS and POUNDS to be decimal numbers with a total of 12 digits, two of which are placed after the decimal point. 


SQL provides DROP TYPE and ALTER TYPE clauses to drop or modify types that have been created earlier. 

CREATE TABLE EXTENSIONS 
Applications often require creation of tables that have the same schema as an existing table. SQL provides a create table like extension to support this task. 
	
	CREATE TABLE temp_instructor LIKE instructor;



SCHEMAS CALAOGS AND ENVIRONMENTS 





AUTHORIZATION 
We may assign a user several forms of authorizations on parts of the database 
• Authorization to read data.
• Authorization to insert new data.
• Authorization to update data.
• Authorization to delete data.

Each of these types of authorizations is called a privilege. 

GRANTING AND REVOKING OF PRIVILAGES 
The SQL standard includes the privileges select,insert,update and delete. The privilege all privileges can be used as a short form for all the allowable privilages. 

A user who creates a new relation is given all privileges on that relation automatically. 


		grant <privilege list> ON
		relation name or view name>
		<user/role list>




It is worth noting that the SQL authorization mechanism grants privileges on an entire relation, or on specified attributes of a relation. However, it does not permit authorizations on specific tuples of a relation.

To revoke an authorization, we use the revoke statement. It takes a form almost identical to that of grant:
revoke <privilege list>
on <relation name or view name>
from <user/role list>;

Thus, to revoke the privileges that we granted previously, we write 
		
		revoke select on department from Amit, Satoshi; 
		revoke update (budget) on department from Amit, Satoshi;



ROLES 
The notion of roles captures this concept. A set of roles is created in the database. Authorizations can be granted to roles, in exactly the same fashion as they are granted to individual users. Each database user is granted a set of roles (which may be empty) that she is authorized to perform.



Roles can be created in SQL as follows:
create role instructor;


Roles can then be granted privileges just as the users can, as illustrated in this
statement:
grant select on takes
to instructor;



Roles can be granted to users, as well as to other roles, as these statements show:
grant dean to Amit;
create role dean;
grant instructor to dean;
grant dean to Satoshi;

Thus the privileges of a user or a role consist of:
• All privileges directly granted to the user/role.
• All privileges granted to roles that have been granted to the user/role



It is worth noting that the concept of role-based authorization is not specific to SQL, and role-based authorization is used for access control in a wide variety of shared applications.

AUTHORIZATION ON VIEWS 

create view geo instructor as
(select *
from instructor
where dept name = ’Geology’);


A user who creates a view does not necessarily receive all privileges on that
view. She receives only those privileges that provide no additional authorization
beyond those that she already had. For example, a user who creates a view cannot
be given update authorization on a view without having update authorization
on the relations used to define the view. If a user creates a view on which no
authorization can be granted, the system will deny the view creation request.
In our geo instructor view example, the creator of the view must have select
authorization on the instructor relation


AUTHORIZATIONS ON SCHEMA 
The SQL standard specifies a primitive authorization mechanism for the database
schema: Only the owner of the schema can carry out any modification to the
schema, such as creating or deleting relations, adding or dropping attributes of
relations, and adding or dropping indices



However, SQL includes a references privilege that permits a user to declare
foreign keys when creating relations. The SQL references privilege is granted on
specific attributes in a manner like that for the update privilege. The following
grant statement allows user Mariano to create relations that reference the key
branch name of the branch relation as a foreign key:
grant references (dept name) on department to Mariano;



TRANSFER OF PRIVILEGES 


A user who has been granted some form of authorization may be allowed to
pass on this authorization to other users. By default, a user/role that is granted a
privilege is not authorized to grant that privilege to another user/role. If we wish
to grant a privilege and to allow the recipient to pass the privilege on to other
users, we append the with grant option clause to the appropriate grant command.
For example, if we wish to allow Amit the select privilege on department and allow
Amit to grant this privilege to others, we write:
grant select on department to Amit with grant option;


The passing of a specific authorization from one user to another can be represented by an authorization graph. The
nodes of this graph are the users.


REVOKING OF PRIVILEGES 

As we just saw, revocation of a privilege from a user/role may cause other
users/roles also to lose that privilege. This behavior is called cascading revocation.
In most database systems, cascading is the default behavior. However, the revoke
statement may specify restrict in order to prevent cascading revocation:
revoke select on department from Amit, Satoshi restric


The following revoke statement revokes only the grant option, rather than
the actual select privilege:
revoke grant option for select on department from Amit;

Note that some database implementations do not support the above syntax; instead, the privilege itself can be revoked, and then granted again without the
grant option.





































